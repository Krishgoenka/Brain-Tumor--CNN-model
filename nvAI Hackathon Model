{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.029481,
     "end_time": "2024-05-03T09:17:20.585227",
     "exception": false,
     "start_time": "2024-05-03T09:17:20.555746",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# nvAI Brain Tumor Detection Model\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.026542,
     "end_time": "2024-05-03T09:17:20.639659",
     "exception": false,
     "start_time": "2024-05-03T09:17:20.613117",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# # **Lets Start -  Members**\n",
    "# >üë®‚Äçüíª Parth Vastavik - Full Stack Developer\n",
    "# >üë®‚Äçüíª Krish Goenka - AI Model Developer \n",
    "# > üë®‚Äçüíª Anustup Karnar - AI Model Developer\n",
    "# > üë®‚Äçüíª Rajarshi Ghosh - AI Model Developer\n",
    "# > üë©‚Äçüíª Palak Jain - UI/UX Designer, Presentation Head**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.026557,
     "end_time": "2024-05-03T09:17:20.692926",
     "exception": false,
     "start_time": "2024-05-03T09:17:20.666369",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.026121,
     "end_time": "2024-05-03T09:17:20.745637",
     "exception": false,
     "start_time": "2024-05-03T09:17:20.719516",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# All imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:20.807355Z",
     "iopub.status.busy": "2024-05-03T09:17:20.806669Z",
     "iopub.status.idle": "2024-05-03T09:17:26.411034Z",
     "shell.execute_reply": "2024-05-03T09:17:26.409712Z",
     "shell.execute_reply.started": "2024-05-03T06:47:23.994946Z"
    },
    "papermill": {
     "duration": 5.639097,
     "end_time": "2024-05-03T09:17:26.411297",
     "exception": false,
     "start_time": "2024-05-03T09:17:20.772200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import keras \n",
    "from keras.models import Sequential\n",
    "from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n",
    "from PIL import Image\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('dark_background')\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import OneHotEncoder "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.027587,
     "end_time": "2024-05-03T09:17:26.470467",
     "exception": false,
     "start_time": "2024-05-03T09:17:26.442880",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# One Hot Encoding the Target Classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:26.549207Z",
     "iopub.status.busy": "2024-05-03T09:17:26.548109Z",
     "iopub.status.idle": "2024-05-03T09:17:26.556795Z",
     "shell.execute_reply": "2024-05-03T09:17:26.556130Z",
     "shell.execute_reply.started": "2024-05-03T06:47:24.007576Z"
    },
    "papermill": {
     "duration": 0.054269,
     "end_time": "2024-05-03T09:17:26.556899",
     "exception": false,
     "start_time": "2024-05-03T09:17:26.502630",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OneHotEncoder()"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "encoder = OneHotEncoder()\n",
    "encoder.fit([[0], [1]]) \n",
    "# 0 - Tumor\n",
    "# 1 - Normal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.02811,
     "end_time": "2024-05-03T09:17:26.613743",
     "exception": false,
     "start_time": "2024-05-03T09:17:26.585633",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Creating 3 Important Lists --\n",
    "1. data list for storing image data in numpy array form\n",
    "2. paths list for storing paths of all images\n",
    "3. result list for storing one hot encoded form of target class whether normal or tumor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:26.678257Z",
     "iopub.status.busy": "2024-05-03T09:17:26.677649Z",
     "iopub.status.idle": "2024-05-03T09:17:27.945364Z",
     "shell.execute_reply": "2024-05-03T09:17:27.944761Z",
     "shell.execute_reply.started": "2024-05-03T06:47:24.024481Z"
    },
    "papermill": {
     "duration": 1.304122,
     "end_time": "2024-05-03T09:17:27.945500",
     "exception": false,
     "start_time": "2024-05-03T09:17:26.641378",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This cell updates result list for images with tumor\n",
    "\n",
    "data = []\n",
    "paths = []\n",
    "result = []\n",
    "\n",
    "for r, d, f in os.walk(r'../input/brain-mri-images-for-brain-tumor-detection/yes'):\n",
    "    for file in f:\n",
    "        if '.jpg' in file:\n",
    "            paths.append(os.path.join(r, file))\n",
    "\n",
    "for path in paths:\n",
    "    img = Image.open(path)\n",
    "    img = img.resize((128,128))\n",
    "    img = np.array(img)\n",
    "    if(img.shape == (128,128,3)):\n",
    "        data.append(np.array(img))\n",
    "        result.append(encoder.transform([[0]]).toarray())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:28.010531Z",
     "iopub.status.busy": "2024-05-03T09:17:28.009905Z",
     "iopub.status.idle": "2024-05-03T09:17:29.034363Z",
     "shell.execute_reply": "2024-05-03T09:17:29.033739Z",
     "shell.execute_reply.started": "2024-05-03T06:47:24.580916Z"
    },
    "papermill": {
     "duration": 1.060381,
     "end_time": "2024-05-03T09:17:29.034492",
     "exception": false,
     "start_time": "2024-05-03T09:17:27.974111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This cell updates result list for images without tumor\n",
    "\n",
    "paths = []\n",
    "for r, d, f in os.walk(r\"../input/brain-mri-images-for-brain-tumor-detection/no\"):\n",
    "    for file in f:\n",
    "        if '.jpg' in file:\n",
    "            paths.append(os.path.join(r, file))\n",
    "\n",
    "for path in paths:\n",
    "    img = Image.open(path)\n",
    "    img = img.resize((128,128))\n",
    "    img = np.array(img)\n",
    "    if(img.shape == (128,128,3)):\n",
    "        data.append(np.array(img))\n",
    "        result.append(encoder.transform([[1]]).toarray())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:29.104388Z",
     "iopub.status.busy": "2024-05-03T09:17:29.103659Z",
     "iopub.status.idle": "2024-05-03T09:17:29.112653Z",
     "shell.execute_reply": "2024-05-03T09:17:29.111901Z",
     "shell.execute_reply.started": "2024-05-03T06:47:24.948867Z"
    },
    "papermill": {
     "duration": 0.045175,
     "end_time": "2024-05-03T09:17:29.112772",
     "exception": false,
     "start_time": "2024-05-03T09:17:29.067597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(139, 128, 128, 3)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = np.array(data)\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:29.217109Z",
     "iopub.status.busy": "2024-05-03T09:17:29.216393Z",
     "iopub.status.idle": "2024-05-03T09:17:29.219751Z",
     "shell.execute_reply": "2024-05-03T09:17:29.219083Z",
     "shell.execute_reply.started": "2024-05-03T06:47:24.960856Z"
    },
    "papermill": {
     "duration": 0.037623,
     "end_time": "2024-05-03T09:17:29.219857",
     "exception": false,
     "start_time": "2024-05-03T09:17:29.182234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "result = np.array(result)\n",
    "result = result.reshape(139,2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.031961,
     "end_time": "2024-05-03T09:17:29.283342",
     "exception": false,
     "start_time": "2024-05-03T09:17:29.251381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Splitting the Data into Training & Testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:29.351607Z",
     "iopub.status.busy": "2024-05-03T09:17:29.350879Z",
     "iopub.status.idle": "2024-05-03T09:17:29.355632Z",
     "shell.execute_reply": "2024-05-03T09:17:29.354963Z",
     "shell.execute_reply.started": "2024-05-03T06:47:24.967276Z"
    },
    "papermill": {
     "duration": 0.039904,
     "end_time": "2024-05-03T09:17:29.355752",
     "exception": false,
     "start_time": "2024-05-03T09:17:29.315848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_train,x_test,y_train,y_test = train_test_split(data, result, test_size=0.2, shuffle=True, random_state=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.030533,
     "end_time": "2024-05-03T09:17:29.414117",
     "exception": false,
     "start_time": "2024-05-03T09:17:29.383584",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Building"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.027573,
     "end_time": "2024-05-03T09:17:29.470756",
     "exception": false,
     "start_time": "2024-05-03T09:17:29.443183",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Batch normalization is a technique for training very deep neural networks that standardizes the inputs to a layer for each mini-batch. This has the effect of stabilizing the learning process and dramatically reducing the number of training epochs required to train deep networks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:29.538756Z",
     "iopub.status.busy": "2024-05-03T09:17:29.538096Z",
     "iopub.status.idle": "2024-05-03T09:17:31.824982Z",
     "shell.execute_reply": "2024-05-03T09:17:31.823887Z",
     "shell.execute_reply.started": "2024-05-03T06:47:24.982578Z"
    },
    "papermill": {
     "duration": 2.326789,
     "end_time": "2024-05-03T09:17:31.825244",
     "exception": false,
     "start_time": "2024-05-03T09:17:29.498455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d (Conv2D)              (None, 128, 128, 32)      416       \n",
      "_________________________________________________________________\n",
      "conv2d_1 (Conv2D)            (None, 128, 128, 32)      4128      \n",
      "_________________________________________________________________\n",
      "batch_normalization (BatchNo (None, 128, 128, 32)      128       \n",
      "_________________________________________________________________\n",
      "max_pooling2d (MaxPooling2D) (None, 64, 64, 32)        0         \n",
      "_________________________________________________________________\n",
      "dropout (Dropout)            (None, 64, 64, 32)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_2 (Conv2D)            (None, 64, 64, 64)        8256      \n",
      "_________________________________________________________________\n",
      "conv2d_3 (Conv2D)            (None, 64, 64, 64)        16448     \n",
      "_________________________________________________________________\n",
      "batch_normalization_1 (Batch (None, 64, 64, 64)        256       \n",
      "_________________________________________________________________\n",
      "max_pooling2d_1 (MaxPooling2 (None, 32, 32, 64)        0         \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 32, 32, 64)        0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 65536)             0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 512)               33554944  \n",
      "_________________________________________________________________\n",
      "dropout_2 (Dropout)          (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 2)                 1026      \n",
      "=================================================================\n",
      "Total params: 33,585,602\n",
      "Trainable params: 33,585,410\n",
      "Non-trainable params: 192\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(32, kernel_size=(2, 2), input_shape=(128, 128, 3), padding = 'Same'))\n",
    "model.add(Conv2D(32, kernel_size=(2, 2),  activation ='relu', padding = 'Same'))\n",
    "\n",
    "\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Conv2D(64, kernel_size = (2,2), activation ='relu', padding = 'Same'))\n",
    "model.add(Conv2D(64, kernel_size = (2,2), activation ='relu', padding = 'Same'))\n",
    "\n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Flatten())\n",
    "\n",
    "model.add(Dense(512, activation='relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(2, activation='softmax'))\n",
    "\n",
    "model.compile(loss = \"categorical_crossentropy\", optimizer='Adamax')\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:31.889090Z",
     "iopub.status.busy": "2024-05-03T09:17:31.888200Z",
     "iopub.status.idle": "2024-05-03T09:17:31.891802Z",
     "shell.execute_reply": "2024-05-03T09:17:31.891188Z",
     "shell.execute_reply.started": "2024-05-03T06:47:25.135822Z"
    },
    "papermill": {
     "duration": 0.037264,
     "end_time": "2024-05-03T09:17:31.891904",
     "exception": false,
     "start_time": "2024-05-03T09:17:31.854640",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(111, 2)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:31.955094Z",
     "iopub.status.busy": "2024-05-03T09:17:31.954461Z",
     "iopub.status.idle": "2024-05-03T09:17:39.055624Z",
     "shell.execute_reply": "2024-05-03T09:17:39.056090Z",
     "shell.execute_reply.started": "2024-05-03T06:47:25.141922Z"
    },
    "papermill": {
     "duration": 7.135862,
     "end_time": "2024-05-03T09:17:39.056245",
     "exception": false,
     "start_time": "2024-05-03T09:17:31.920383",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "3/3 [==============================] - 0s 155ms/step - loss: 14.4363 - val_loss: 30.0521\n",
      "Epoch 2/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 7.0809 - val_loss: 14.5118\n",
      "Epoch 3/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 3.7374 - val_loss: 6.3293\n",
      "Epoch 4/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 1.5334 - val_loss: 6.7763\n",
      "Epoch 5/30\n",
      "3/3 [==============================] - 0s 32ms/step - loss: 2.1005 - val_loss: 6.2769\n",
      "Epoch 6/30\n",
      "3/3 [==============================] - 0s 33ms/step - loss: 0.9417 - val_loss: 9.1341\n",
      "Epoch 7/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 1.1463 - val_loss: 8.2478\n",
      "Epoch 8/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 0.4958 - val_loss: 7.0543\n",
      "Epoch 9/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 0.3837 - val_loss: 5.3989\n",
      "Epoch 10/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 1.4698 - val_loss: 4.3825\n",
      "Epoch 11/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 0.2554 - val_loss: 3.4099\n",
      "Epoch 12/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 0.0339 - val_loss: 4.7051\n",
      "Epoch 13/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 0.0732 - val_loss: 7.2157\n",
      "Epoch 14/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 0.1440 - val_loss: 7.3487\n",
      "Epoch 15/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 0.4555 - val_loss: 4.6270\n",
      "Epoch 16/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 0.0781 - val_loss: 2.8843\n",
      "Epoch 17/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 1.5209e-04 - val_loss: 2.4502\n",
      "Epoch 18/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 0.1091 - val_loss: 2.4588\n",
      "Epoch 19/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 0.1659 - val_loss: 2.0658\n",
      "Epoch 20/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 5.6438e-05 - val_loss: 2.0181\n",
      "Epoch 21/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 0.1669 - val_loss: 1.9843\n",
      "Epoch 22/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 0.0421 - val_loss: 2.1188\n",
      "Epoch 23/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 6.4957e-04 - val_loss: 2.4944\n",
      "Epoch 24/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 0.0033 - val_loss: 3.0472\n",
      "Epoch 25/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 0.0120 - val_loss: 3.4410\n",
      "Epoch 26/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 0.0229 - val_loss: 3.6655\n",
      "Epoch 27/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 0.0678 - val_loss: 3.4113\n",
      "Epoch 28/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 0.0428 - val_loss: 2.6474\n",
      "Epoch 29/30\n",
      "3/3 [==============================] - 0s 31ms/step - loss: 2.6384e-05 - val_loss: 2.3310\n",
      "Epoch 30/30\n",
      "3/3 [==============================] - 0s 30ms/step - loss: 3.4717e-05 - val_loss: 2.1712\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(x_train, y_train, epochs = 30, batch_size = 40, verbose = 1,validation_data = (x_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.059125,
     "end_time": "2024-05-03T09:17:39.174841",
     "exception": false,
     "start_time": "2024-05-03T09:17:39.115716",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Plotting Losses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:39.302345Z",
     "iopub.status.busy": "2024-05-03T09:17:39.301553Z",
     "iopub.status.idle": "2024-05-03T09:17:39.509192Z",
     "shell.execute_reply": "2024-05-03T09:17:39.508580Z",
     "shell.execute_reply.started": "2024-05-03T06:47:29.145163Z"
    },
    "papermill": {
     "duration": 0.273756,
     "end_time": "2024-05-03T09:17:39.509317",
     "exception": false,
     "start_time": "2024-05-03T09:17:39.235561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Model Loss')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Test', 'Validation'], loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.063296,
     "end_time": "2024-05-03T09:17:39.638077",
     "exception": false,
     "start_time": "2024-05-03T09:17:39.574781",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Just Checking the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:39.781399Z",
     "iopub.status.busy": "2024-05-03T09:17:39.780766Z",
     "iopub.status.idle": "2024-05-03T09:17:39.783819Z",
     "shell.execute_reply": "2024-05-03T09:17:39.783290Z",
     "shell.execute_reply.started": "2024-05-03T06:47:29.298994Z"
    },
    "papermill": {
     "duration": 0.077219,
     "end_time": "2024-05-03T09:17:39.783918",
     "exception": false,
     "start_time": "2024-05-03T09:17:39.706699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def names(number):\n",
    "    if number==0:\n",
    "        return 'Tumor Detected'\n",
    "    else:\n",
    "        return 'No Tumor Detected'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:39.911131Z",
     "iopub.status.busy": "2024-05-03T09:17:39.910500Z",
     "iopub.status.idle": "2024-05-03T09:17:40.235827Z",
     "shell.execute_reply": "2024-05-03T09:17:40.236429Z",
     "shell.execute_reply.started": "2024-05-03T06:47:29.304391Z"
    },
    "papermill": {
     "duration": 0.392903,
     "end_time": "2024-05-03T09:17:40.236594",
     "exception": false,
     "start_time": "2024-05-03T09:17:39.843691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "97.87939786911011% Confidence | Result- This Is No Tumor Detected\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pyplot import imshow\n",
    "img = Image.open(r\"../input/brain-tumor-dataset/Brain_Tumor_Dataset/Negative/Te-noTr_0002.jpg\")\n",
    "x = np.array(img.resize((128,128)))\n",
    "x = x.reshape(1,128,128,3)\n",
    "res = model.predict_on_batch(x)\n",
    "classification = np.where(res == np.amax(res))[1][0]\n",
    "imshow(img)\n",
    "print(str(res[0][classification]*100) + '% Confidence | Result- This Is ' + names(classification))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:40.380273Z",
     "iopub.status.busy": "2024-05-03T09:17:40.379240Z",
     "iopub.status.idle": "2024-05-03T09:17:40.544664Z",
     "shell.execute_reply": "2024-05-03T09:17:40.545222Z",
     "shell.execute_reply.started": "2024-05-03T06:47:29.546382Z"
    },
    "papermill": {
     "duration": 0.240635,
     "end_time": "2024-05-03T09:17:40.545372",
     "exception": false,
     "start_time": "2024-05-03T09:17:40.304737",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100.0% Confidence | Result- This Is A Tumor Detected\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pyplot import imshow\n",
    "img = Image.open(r\"../input/brain-mri-images-for-brain-tumor-detection/yes/Y1.jpg\")\n",
    "x = np.array(img.resize((128,128)))\n",
    "x = x.reshape(1,128,128,3)\n",
    "res = model.predict_on_batch(x)\n",
    "classification = np.where(res == np.amax(res))[1][0]\n",
    "imshow(img)\n",
    "print(str(res[0][classification]*100) + '% Confidence | Result- This Is A ' + names(classification))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:40.687791Z",
     "iopub.status.busy": "2024-05-03T09:17:40.687184Z",
     "iopub.status.idle": "2024-05-03T09:17:40.860215Z",
     "shell.execute_reply": "2024-05-03T09:17:40.860668Z",
     "shell.execute_reply.started": "2024-05-03T06:47:29.697845Z"
    },
    "papermill": {
     "duration": 0.246405,
     "end_time": "2024-05-03T09:17:40.860809",
     "exception": false,
     "start_time": "2024-05-03T09:17:40.614404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100.0% Confidence | Result- This Is A No Tumor Detected\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pyplot import imshow\n",
    "img = Image.open(r\"../input/brain-tumor-dataset/Brain_Tumor_Dataset/Negative/Te-no_0016.jpg\")\n",
    "x = np.array(img.resize((128,128)))\n",
    "x = x.reshape(1,128,128,3)\n",
    "res = model.predict_on_batch(x)\n",
    "classification = np.where(res == np.amax(res))[1][0]\n",
    "imshow(img)\n",
    "print(str(res[0][classification]*100) + '% Confidence | Result- This Is A ' + names(classification))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:41.005527Z",
     "iopub.status.busy": "2024-05-03T09:17:41.004880Z",
     "iopub.status.idle": "2024-05-03T09:17:41.209698Z",
     "shell.execute_reply": "2024-05-03T09:17:41.209047Z",
     "shell.execute_reply.started": "2024-05-03T06:47:29.849810Z"
    },
    "papermill": {
     "duration": 0.279514,
     "end_time": "2024-05-03T09:17:41.209805",
     "exception": false,
     "start_time": "2024-05-03T09:17:40.930291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100.0% Confidence | Result- This Is A No Tumor Detected\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.pyplot import imshow\n",
    "img = Image.open(r\"../input/brain-tumor-dataset/Brain_Tumor_Dataset/Positive/Te-gl_0029.jpg\")\n",
    "x = np.array(img.resize((128,128)))\n",
    "x = x.reshape(1,128,128,3)\n",
    "res = model.predict_on_batch(x)\n",
    "classification = np.where(res == np.amax(res))[1][0]\n",
    "imshow(img)\n",
    "print(str(res[0][classification]*100) + '% Confidence | Result- This Is A ' + names(classification))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:41.354686Z",
     "iopub.status.busy": "2024-05-03T09:17:41.353951Z",
     "iopub.status.idle": "2024-05-03T09:17:41.399882Z",
     "shell.execute_reply": "2024-05-03T09:17:41.400428Z",
     "shell.execute_reply.started": "2024-05-03T06:47:30.027189Z"
    },
    "papermill": {
     "duration": 0.120934,
     "end_time": "2024-05-03T09:17:41.400584",
     "exception": false,
     "start_time": "2024-05-03T09:17:41.279650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 217.12%\n"
     ]
    }
   ],
   "source": [
    "# Evaluate model\n",
    "accuracy = model.evaluate(x_test, y_test, verbose=0)\n",
    "print(\"Test Accuracy: {:.2f}%\".format(accuracy * 100))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.071676,
     "end_time": "2024-05-03T09:17:41.545426",
     "exception": false,
     "start_time": "2024-05-03T09:17:41.473750",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TEST DATA ACCURACY :- 84.66%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:41.696649Z",
     "iopub.status.busy": "2024-05-03T09:17:41.695678Z",
     "iopub.status.idle": "2024-05-03T09:17:41.737580Z",
     "shell.execute_reply": "2024-05-03T09:17:41.737022Z",
     "shell.execute_reply.started": "2024-05-03T06:50:56.911045Z"
    },
    "papermill": {
     "duration": 0.121797,
     "end_time": "2024-05-03T09:17:41.737699",
     "exception": false,
     "start_time": "2024-05-03T09:17:41.615902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved to disk as 'my_model.h5'\n"
     ]
    }
   ],
   "source": [
    "# Importing necessary libraries\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "\n",
    "# Creating a Sequential model\n",
    "model = Sequential()\n",
    "\n",
    "# Adding layers to the model\n",
    "model.add(Dense(32, activation='relu', input_dim=100))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "# Compiling the model\n",
    "model.compile(optimizer='rmsprop',\n",
    "              loss='binary_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "# Saving the model to disk\n",
    "model.save('my_model.h5')\n",
    "\n",
    "print(\"Model saved to disk as 'my_model.h5'\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.071171,
     "end_time": "2024-05-03T09:17:41.879761",
     "exception": false,
     "start_time": "2024-05-03T09:17:41.808590",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:42.026645Z",
     "iopub.status.busy": "2024-05-03T09:17:42.025659Z",
     "iopub.status.idle": "2024-05-03T09:17:53.144927Z",
     "shell.execute_reply": "2024-05-03T09:17:53.144244Z",
     "shell.execute_reply.started": "2024-05-03T06:53:16.069433Z"
    },
    "papermill": {
     "duration": 11.194832,
     "end_time": "2024-05-03T09:17:53.145038",
     "exception": false,
     "start_time": "2024-05-03T09:17:41.950206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting imutils\r\n",
      "  Downloading imutils-0.5.4.tar.gz (17 kB)\r\n",
      "Building wheels for collected packages: imutils\r\n",
      "  Building wheel for imutils (setup.py) ... \u001b[?25l-\b \b\\\b \bdone\r\n",
      "\u001b[?25h  Created wheel for imutils: filename=imutils-0.5.4-py3-none-any.whl size=25858 sha256=58de7b08df796de5587353ef63df2ac205c72ccb3a0c99b5f90f26c445dcce91\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/86/d7/0a/4923351ed1cec5d5e24c1eaf8905567b02a0343b24aa873df2\r\n",
      "Successfully built imutils\r\n",
      "Installing collected packages: imutils\r\n",
      "Successfully installed imutils-0.5.4\r\n",
      "\u001b[33mWARNING: You are using pip version 20.3.1; however, version 24.0 is available.\r\n",
      "You should consider upgrading via the '/opt/conda/bin/python -m pip install --upgrade pip' command.\u001b[0m\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install imutils\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:53.298014Z",
     "iopub.status.busy": "2024-05-03T09:17:53.297382Z",
     "iopub.status.idle": "2024-05-03T09:17:53.434523Z",
     "shell.execute_reply": "2024-05-03T09:17:53.433819Z",
     "shell.execute_reply.started": "2024-05-03T06:53:39.355308Z"
    },
    "papermill": {
     "duration": 0.216285,
     "end_time": "2024-05-03T09:17:53.434637",
     "exception": false,
     "start_time": "2024-05-03T09:17:53.218352",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import load_model\n",
    "import cv2\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as pltƒÅ\n",
    "import imutils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:53.600540Z",
     "iopub.status.busy": "2024-05-03T09:17:53.599887Z",
     "iopub.status.idle": "2024-05-03T09:17:53.602592Z",
     "shell.execute_reply": "2024-05-03T09:17:53.602096Z",
     "shell.execute_reply.started": "2024-05-03T06:54:23.546010Z"
    },
    "papermill": {
     "duration": 0.093567,
     "end_time": "2024-05-03T09:17:53.602696",
     "exception": false,
     "start_time": "2024-05-03T09:17:53.509129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def crop_brain_contour(image, plot=False):\n",
    "    \n",
    "    #import imutils\n",
    "    #import cv2\n",
    "    #from matplotlib import pyplot as plt\n",
    "    \n",
    "    # Convert the image to grayscale, and blur it slightly\n",
    "    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "    gray = cv2.GaussianBlur(gray, (5, 5), 0)\n",
    "\n",
    "    # Threshold the image, then perform a series of erosions +\n",
    "    # dilations to remove any small regions of noise\n",
    "    thresh = cv2.threshold(gray, 45, 255, cv2.THRESH_BINARY)[1]\n",
    "    thresh = cv2.erode(thresh, None, iterations=2)\n",
    "    thresh = cv2.dilate(thresh, None, iterations=2)\n",
    "\n",
    "    # Find contours in thresholded image, then grab the largest one\n",
    "    cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n",
    "    cnts = imutils.grab_contours(cnts)\n",
    "    c = max(cnts, key=cv2.contourArea)\n",
    "    \n",
    "\n",
    "    # Find the extreme points\n",
    "    extLeft = tuple(c[c[:, :, 0].argmin()][0])\n",
    "    extRight = tuple(c[c[:, :, 0].argmax()][0])\n",
    "    extTop = tuple(c[c[:, :, 1].argmin()][0])\n",
    "    extBot = tuple(c[c[:, :, 1].argmax()][0])\n",
    "    \n",
    "    # crop new image out of the original image using the four extreme points (left, right, top, bottom)\n",
    "    new_image = image[extTop[1]:extBot[1], extLeft[0]:extRight[0]]            \n",
    "\n",
    "    if plot:\n",
    "        plt.figure()\n",
    "\n",
    "        plt.subplot(1, 2, 1)\n",
    "        plt.imshow(image)\n",
    "        \n",
    "        plt.tick_params(axis='both', which='both', \n",
    "                        top=False, bottom=False, left=False, right=False,\n",
    "                        labelbottom=False, labeltop=False, labelleft=False, labelright=False)\n",
    "        \n",
    "        plt.title('Original Image')\n",
    "            \n",
    "        plt.subplot(1, 2, 2)\n",
    "        plt.imshow(new_image)\n",
    "\n",
    "        plt.tick_params(axis='both', which='both', \n",
    "                        top=False, bottom=False, left=False, right=False,\n",
    "                        labelbottom=False, labeltop=False, labelleft=False, labelright=False)\n",
    "\n",
    "        plt.title('Cropped Image')\n",
    "        \n",
    "        plt.show()\n",
    "    \n",
    "    return new_image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:17:53.774301Z",
     "iopub.status.busy": "2024-05-03T09:17:53.773213Z",
     "iopub.status.idle": "2024-05-03T09:18:21.214014Z",
     "shell.execute_reply": "2024-05-03T09:18:21.215238Z",
     "shell.execute_reply.started": "2024-05-03T07:15:33.636373Z"
    },
    "papermill": {
     "duration": 27.540132,
     "end_time": "2024-05-03T09:18:21.215492",
     "exception": false,
     "start_time": "2024-05-03T09:17:53.675360",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "The cropped image is None or empty.\n",
      "Number of tumorous images (Y): 0\n",
      "Number of non-tumorous images (N): 0\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import cv2\n",
    "from keras.models import load_model\n",
    "import numpy as np\n",
    "\n",
    "# Load the saved model\n",
    "model = load_model('/kaggle/working/my_model.h5')\n",
    "\n",
    "def crop_brain_contour(image, plot=False):\n",
    "    \"\"\"\n",
    "    This function crops the part of the image which contains the brain.\n",
    "    Arguments:\n",
    "        image: A numpy array representing the image.\n",
    "        plot: A boolean indicating whether to plot the cropped image.\n",
    "    Returns:\n",
    "        cropped_img: A numpy array representing the cropped image.\n",
    "    \"\"\"\n",
    "    # Add your implementation here\n",
    "    pass\n",
    "\n",
    "def preprocess_user_input(image_path, image_size):\n",
    "    \"\"\"\n",
    "    Preprocess the user input image. \n",
    "    Arguments:\n",
    "        image_path: string representing the file path of the image.\n",
    "        image_size: tuple representing the desired image size.\n",
    "    Returns:\n",
    "        img: A numpy array with shape = (image_width, image_height, #_channels)\n",
    "    \"\"\"\n",
    "    if not os.path.exists(image_path):\n",
    "        print(f\"No file found at {image_path}\")\n",
    "        return None\n",
    "\n",
    "    # load the image\n",
    "    image = cv2.imread(image_path)\n",
    "    \n",
    "    if image is None:\n",
    "        print(f\"Failed to read image at {image_path}\")\n",
    "        return None\n",
    "\n",
    "    # crop the brain and ignore the unnecessary rest part of the image\n",
    "    image = crop_brain_contour(image, plot=False)\n",
    "    \n",
    "    if image is None or image.size == 0:\n",
    "        print(\"The cropped image is None or empty.\")\n",
    "        return None\n",
    "\n",
    "    # resize image\n",
    "    image_width, image_height = image_size\n",
    "    image = cv2.resize(image, dsize=(image_width, image_height), interpolation=cv2.INTER_CUBIC)\n",
    "    \n",
    "    # normalize values\n",
    "    image = image / 255.\n",
    "    \n",
    "    # convert image to numpy array and reshape it to be ready to use with the model\n",
    "    img = np.array(image)\n",
    "    img = img.reshape(1, image_width, image_height, 3)\n",
    "    \n",
    "    return img\n",
    "\n",
    "# Directory containing images\n",
    "directory = '/kaggle/input/brain-tumor-dataset/Brain_Tumor_Dataset/Negative'\n",
    "\n",
    "# Initialize counters\n",
    "count_Y = 0\n",
    "count_N = 0\n",
    "\n",
    "# Loop through all images in the directory\n",
    "for filename in os.listdir(directory):\n",
    "    if filename.endswith(\".jpg\") :\n",
    "        # Preprocess the image\n",
    "        img_path = os.path.join(directory, filename)\n",
    "        user_img = preprocess_user_input(img_path, (240, 240))\n",
    "\n",
    "        if user_img is None:\n",
    "            continue\n",
    "\n",
    "        # Make a prediction\n",
    "        prediction = model.predict(user_img)\n",
    "\n",
    "        # Interpret the prediction\n",
    "        predict = (prediction[0][0] * 10)\n",
    "        if predict >= 1:\n",
    "            count_Y += 1\n",
    "        else:\n",
    "            count_N += 1\n",
    "\n",
    "# Print the results\n",
    "print(\"Number of tumorous images (Y):\", count_Y)\n",
    "print(\"Number of non-tumorous images (N):\", count_N)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.148585,
     "end_time": "2024-05-03T09:18:21.503299",
     "exception": false,
     "start_time": "2024-05-03T09:18:21.354714",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.130102,
     "end_time": "2024-05-03T09:18:21.765085",
     "exception": false,
     "start_time": "2024-05-03T09:18:21.634983",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Complete just have tset model for taking input from User . And to implement model in Frontend nvAI Website"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.123333,
     "end_time": "2024-05-03T09:18:22.013858",
     "exception": false,
     "start_time": "2024-05-03T09:18:21.890525",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "# Load the model from the HDF5 file\n",
    "loaded_model = tf.keras.models.load_model('my_model.h5')\n",
    "\n",
    "# Now you can use 'loaded_model' for inference or further training\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.122118,
     "end_time": "2024-05-03T09:18:22.270514",
     "exception": false,
     "start_time": "2024-05-03T09:18:22.148396",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.120153,
     "end_time": "2024-05-03T09:18:22.511253",
     "exception": false,
     "start_time": "2024-05-03T09:18:22.391100",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 165566,
     "sourceId": 377107,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3885687,
     "sourceId": 6748864,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30042,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "papermill": {
   "duration": 66.350564,
   "end_time": "2024-05-03T09:18:22.842218",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-03T09:17:16.491654",
   "version": "2.1.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
